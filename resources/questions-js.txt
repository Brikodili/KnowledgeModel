В чём особенность использования for .. in для объекта или массива?
Цикл for in всегда обходит всю цепочку прототипов полностью: таким образом, чем больше прототипов (слоёв наследования) в цепочке, тем медленнее работает цикл.

Как создать замыкание ( JS )?
Замыкания - это такой приём, когда новые области видимости (например, функций) всегда имеют доступ к внешней области, в которых они были объявлены. Собственно, единственный механизм создания областей видимости в JavaScript — это и есть функции: таким образом, объявляя функцию, вы автоматически реализуете замыкания. Или, другими словами: любая объявленная функция по умолчанию ведёт себя как замыкание.

Особенности использования this?
Когда мы используем this в глобальной области видимости, она просто ссылается на глобальный объект. При вызове foo() -> this ссылается на глобальный объект. При вызове метода test.foo() this ссылается на test. Если перед вызовом функции присутствует ключевое слово new то данная функция будет действовать как конструктор, внутри такой функции this будет указывать на новый созданный Object. Когда мы используем методы call или apply - то this будет присвоено значение первого передаваемого параметра.

JSONP
Формат нужен для того, чтобы иметь возможность выполнять асинхронные запросы к серверу расположенному на другом домене. Формат запроса, когда JSON заворачивается в функцию, называется JSONP («JSON with Padding»). В паттерне JSONP URL, на который указывает атрибут src тэга <script>, возвращает данные JSON, обёрнутые в вызов функции. В подобном случае функция, уже определённая в среде JavaScript, может манипулировать JSON-данными. Начинка JSONP может выглядеть так:  functionCall({"Name": "Foo"});

Какие возможны способы вызова функции?
Существует четыре пути вызова функций: Вызов метода — Method Invocation. Вызов функции — Function Invocation. Вызов конструктора — Constructor Invocation. Вызов apply и call — Apply And Call Invocation.

Cпособы вызова функции: Что такое Method Invocation?
Вызов метода / Method Invocation - это когда функция является частью объекта, она называется методом. «Вызов метода» представляет из себя вызов функции, принадлежащей объекту.

Cпособы вызова функции: Что такое Function Invocation
Вызов функции выполняется с помощью оператора ():

Cпособы вызова функции: Что такое Apply And Call Invocation
Вызов apply и call — Apply And Call Invocation. Позволяет вручную запустить функцию, попутно снабдив ее параметрами и обозначив this. makeArray.apply( car, [ 'one', 'two' ] );

Какие из объектов трактуются как false, какие как true?
undefined, null - false; Все числа - true, кроме 0, NaN — false. Все строки true, кроме пустой строки '' — false. Объекты - всегда true.

Чему равна переменная а и какого она типа? ( var a = 2 + '2"; )
'22', тип - string.

Что такое глобальные переменные ? Как они создаются ? Какие проблемы связаны с использованием глобальных переменных?
Переменные объявляются с помощью ключевого слова var. В JavaScript есть две области видимости переменной: глобальная и локальная. Переменная, которая была объявлена за пределами функции является глобальной переменной - она имеет глобальную область видимости и доступна в любом месте исходного кода. Переменная, объявленная внутри функции называется локальной. Локальная переменная создаётся и уничтожается каждый раз при вызове функции. Внутри тела функции локальная переменная имеет преимущество перед глобальной. В JavaScript объявления переменных неявно "поднимаются" на самый верх относительно своей области видимости.

Какие языковые конструкции в javascript создают scope?
JavaScript используется область видимости на уровне функций. Блоки кода, вроде того, который у нас идёт сразу после if, не создают новую область видимости.

Что такое null и undefined? Чем отличается null от undefined?
null и undefined не эквивалентны. Каждый из них является представителем своего типа. JavaScript null — это литерал и ключевое слово языка, которое представляет собой отсутствие какого-либо объекта. Другими словами, null указывает «в никуда». undefined, олицетворяет отсутствие значения как такового. Оба абсолютно неизменны, не имеют свойств и методов и не способны их иметь. Фактически, попытка обратиться к какому-нибудь свойству, или присвоить его, приведёт к ошибке TypeError. Чтобы их различать, вы можете считать undefined неожиданным отсутствием значения, а null — умышленным отсутствием значения.

Что такое метод bind?
Этот метод позволяет привязать функцию к нужному контексту и даже к аргументам.

Что такое «strict mode»?
Это режим, в котором накладывается ряд ограничений на исполняемый код, что повышает безопасность и может предотвратить появление некоторых ошибок.

В чём различие свойств innerHTML и outerHTML?
Свойство любого DOM элемента innerHTML содержит HTML код, который находится внутри этого элемента. При установке нового значения этого свойства, внутренний HTML код рендерится браузером заново. outerHTML почти аналогичен innerHTML, разница в том, что он возвращает полный HTML элемента.

Чем == отличается от === ?
Оператор == сравнивает на равенство, а вот === — на идентичность. Плюс оператора === состоит в том, что он не приводит два значения к одному типу

Что такое .call и .apply? В чем различие между .call и .apply?
Методы call и apply позволяют нам определить контекст (this или, другими словами, конкретный объект) внутри вызываемой функции. Единственное отличие между двумя методами в следующем: первый параметр для обоих методов – объект (this в функции); для call в качестве остальных параметров передаются параметры вызываемой функции, а apply ожидает в качестве второго параметра получить массив, который содержит параметры вызываемой функции.

Как реализовано наследование в JS?
На уровне языка реализованно наследование на прототипах. В Java Script каждый объект может иметь ассоциацию с другим объектом – так называемый “прототип” (prototype). В случае, если поиск некоторого свойства (или метода) в исходном объекте заканчивается неудачно, интерпретатор пытается найти одноименное свойство (метод) в его прототипе, затем – в прототипе прототипа и т.д.

Что представляет из себя метод объекта?
Метод объкта в Java Script – это просто функция, добавленная в ассоциативный массив.

Зачем в JS писать VAR перед переменной?
Если создать переменную через обычное присваивание – будет создана глобальная переменная. А вот если создать переменную с использованием слова VAR, тогда будет создана локальная переменная, которая перестает существовать после завершения работы функции.

Как создать массив в JS?
var array = ["Value 1", "Value 2", "Value 3”]; var array = new Array("Value 1", "Value 2", "Value 3");

Можно ли в JS использовать функцию в качестве конструктора?
var A = function() {}; var myA = new A();

Что такое JSON?
JSON – текстовый формат обмена данными, основанный на Java Script и обычно используемый именно с этим языком. JSON легко читается людьми.

Что такое AJAX и как он работает?
AJAX – подход к построение интерактивных пользовательских интерфейсов веб-приложений, заключающийся в “фоновом” обмене данными браузера с веб-сервером.

Что такое Document Object Model (DOM)?
DOM – программный интерфейс, позволяющий программам получить доступ к содержимому HTML и XML-документов, а также изменять содержимое, структуру и оформление таких документов.

Eсть ли разница между window и document?
Да. У JavaScript есть глобальный объект и всё происходит через него. window — тот самый объект, который хранит глобальные переменные, функции, местоположение, историю. Всё находится внутри него, setTimeout, XMLHttpRequest, console и localStorage также являются частью window.Аналогично дело обстоит и с document, который является свойством объекта window и представляет DOM. Все ноды — это часть document, следовательно, вы можете использовать getElementById или addEventListener для document. Но обратите внимание, что этих методов нет в объекте window.

Когда вызывается window.onload?
window.onload вызывается, когда DOM готов и весь контент, включая картинки, стили, фреймы и т.д. загружен.

Является ли атрибут (attribute) аналогом свойства (property)?
Узел DOM - это объект, поэтому, как и любой объект в JavaScript, он может содержать пользовательские свойства и методы. Свойства и методы видны только в JavaScript и никак не влияют на отображение соответствующего тега. Узлы DOM, с другой стороны, являются HTML-элементами, у которых есть атрибуты.

Отличия  атрибут (attribute)  от свойства (property)?
Доступ к атрибутам осуществляется при помощи стандартных методов. Отличия: Могут быть только строками. Их имя нечувствительно к регистру(т.к. это HTML). Видны в innerHTML (за исключением старых IE). Все атрибуты элемента можно получить с помощью свойства attributes, которое содержит псевдо-массив объектов типа Attr.

Назовите различные пути для получения элемента из DOM дерева?
getElementById, getElementsByClassName, querySelectorAll

Какой наибыстрейший метод для получения элемента через css селектор?
Это зависит от того, что вам нужно найти. Если у вас есть ID элемента, то getElementById — это самый быстрый путь для получения элемента. Однако, вам не следует содержать много ID в вашем документе, чтобы избежать заучивания стилей. getElementsByClassName — это второй по скорости метод для получения элемента.

Почему querySelectorAll(‘.my-class’) медленнее, чем getElementsByClassName(‘my-class’)?
querySelectorAll является универсальным методом. Он оптимизирован под различные типы селекторов. Если вы просто укажите имя класса с «.», внутри он будет использовать getElementsByClassName (может меняться в зависимости от браузера).

Почему я не могу использовать forEach или похожий метод массива для NodeList?
Массив и nodeList имеет параметр length и вы можете использовать цикл для прохода по элементам, но не всё так просто. Оба они унаследованы от Object. Однако, массив имеет иной прототип нежели, чем nodeList. forEach, map, и пр. включены в Array.prototype, которого не существуют для NodeList.prototype объекта. Следовательно, вы не можете использовать forEach для nodeList.

Как бы вы добавили класс к элементу через селектор?
Получите элемент и добавьте имя класса в classlist.

Как проверить, что один элемент является дочерним другому?
Перво-наперво, проверьте является ли указанный родитель прямым для ребенка. Если нет, продолжайте двигаться вверх по дереву.

Как быть уверенным в том, что DOM подготовлен и можно выполнять JavaScript?
Вставьте ваш скрипт в конце body элемента. Когда DOM будет готов браузер вызовет ваш script внутри тэга. Вставьте ваш код внутрь события DOMContentLoaded. Это событие будет вызываться, когда DOM полностью загружен. Наблюдайте событие в readyState для document. Состояние «complete» будет означать полную загрузку:

Что такое всплытие? Как браузер определяет местоположение клика?
Захват: Событие клика произошло. Он начинает с window (самый низкий уровень), затем идёт в document, затем html тэг, затем body, затем table… Он пытается достичь самого высокого уровня элемента, который только возможен. Это зовётся фазой «захвата» (первая фаза). Цель: когда браузер достигнет самого элемента на котором был произведен клик, то браузер отметит если ли у этого элемента какие-либо прикрепленные обработчики. Если ничего нет, то браузер выполнил обработчик клика. Это называет фаза цели (вторая фаза). Всплытие: после вызова обработчика, прикрепленного, браузер начнёт своё путешествие обратно с window. Уровень за уровнем он будет проверять если ли на элементе обработчик на «click» и если обнаружит таковой — выполнит. Это и есть стадия всплытия (третья фаза). Заметьте, когда вы кликните на ячейку, будут исполнены все обработчики событий на click для всех родительских элементов.

Что такое defer и async?
обычное состояние: когда вы вставляете стандартный тэг script (без defer и async), парсер приостанавливает парсинг до того момента, как скрипт будет скачан и выполнен. DEFER: defer в тэге script отложит выполнение скрипта. Следовательно скрипт будет выполнен когда DOM будет доступен. Важный момент, defer не поддерживается всеми современными браузерами. ASYNC: скачивание и выполнение скрипта асинхронно.Если это возможно, устанавливайте выполнение скрипта в асинхронном режиме, но обратите внимание, что async не имеет эффекта на инлайновые скрипты.

Как предотвратить нажатие по ссылке?
вставить preventDefault() внутри обработчика события. Однако, это не остановит дальнейшее распространение. (return false тоже подходит)

Как остановить дальнейшее распространение события?
Вызвать event.stopPropagation();

Могу ли я удалить удалить обработчик события с элемента?
Да. target.removeEventListener(‘click’, handler)

Как я могу запустить обработчик в фазе захвата, а не в фазе всплытия?
В методах addEventListener и removeEventLister есть третий опциональный параметр. Вы можете установить его в true или false в зависимости от того хотите или нет использовать фазу захвата.

Каким образом можно предотвратить множественный вызов обработчика для одного события?
Если слушатель события прикреплён к одному и тому же типу (click, keydown, и т.д.) элемента, вы можете вызвать event.stopImmediatePropagation() в первом обработчике и другие не будут выполнены.

Есть ли что-то такое о чём нужно позаботится при использовании node.cloneNode()?
При клонировании убедитесь, что вы не дублируете ID.

Что интересного в ECMAScript 6?
let — точно так же как var ограничивает видимость переменных в пределах функции, let ограничивает видимость переменных в пределах блока. const — создание read-only констант. Maps и WeakMap — для работы с объектами ключ/значение. Возможность указывать значения параметров функции по-умолчанию. Операторы сравнения is и isnt. Реструктуризующие присваивания.

Что такое Web-components?
Основная идея в том, чтобы позволить программистам создавать “виджеты”. Фрагменты приложения, которые изолированы от документа, в который они встраиваются. Использовать виджет возможно как с помощью HTML, так и с помощью JS API. По-простому, то веб-компонента это некий выделенный в отдельный блок кусок html кода с шаблонированием, стилями и логикой.

Что такое Polymer?
Не все браузеры поддерживают возможности по созданию веб-компонентов. Однако, благодаря библиотеке Polymer, можно это исправить. Polymer обеспечивает набор Polyfills, который позволяет использовать веб-компоненты в несовместимых браузерах.
