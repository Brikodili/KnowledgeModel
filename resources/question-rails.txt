Rails:

Что такое Continuous Integration ( CI )?
Continuous Integration, или для краткости CI – это особый принцип разработки программного обеспечения, который может очень сильно упростить вам жизнь. Если на пальцах, то система CI – это некая программа, которая следит за вашим Source Control, и при появлении там изменений автоматически стягивает их, билдит, гоняет тесты (конечно, если их пишут) и возможно делает кое-что ещё. В случае же неудачи она дает об этом знать всем заинтересованным лицам, в первую очередь – последнему коммитеру.

Разница между HTTP-методами GET и POST?
GET передает данные серверу с помощью URL, а POST передает данные, используя тело HTTP-запроса.

Как долго “живет” сессия?
Время жизни куки, которая хранит идентификатор сессии по умолчанию составляет 0 секунд, т.е. кука храниться до того момента, как браузер будет закрыт. Это время можно изменить на стороне сервера.

Что такое сессии? Где хранятся сессии?
Сессия (HTTP Session) – логический объект, позволяющий передавать данные между последовательными HTTP-запросами от одного пользователя. Сессии создаются на стороне сервера и там же храняться. Другими словами, сессия – механизм, позволяющий однозначно идентифицировать браузер и созданный для этого браузера файл на сервере, в котором храняться переменные сеанса.

Что такое MVC?
Model-View-Controller – схема использования шаблонов проектирования, с помощью которых модель данных приложения, пользовательский интерфейс (UI) и взаимодействие с пользователем раздалены на 3 отдельных компонента так, что модификация одного из компонентов оказывает минимальное воздействие на остальные.

Что за что отвечает в MVC?
В шаблоне MVC, как следует из названия, есть 3 основных компонента: модель, представление и контроллер.

ООП знаете? Что это такое?
Объектно-ориентированное программирование – парадигма программирования, в которой основными концепциями являются понятия объектов и классов. В языках с прототипированием (Java Script, к примеру) вместо классов используются объекты-прототипы.

Расскажите основные принципы в ООП.
Инкапсуляция – механизм, который объединяет данные и методы, манипулирующие этими данными и защищает их от внешнего вмешательства или неправильного использования. Можно сказать, что инкапсуляция подразумевает под собой сокрытие данных, что позволяет эти данные защитить. Наследование – процесс, с помощью которого, один объект может наследовать свойства другого объекта и добавлять к ним черты, характерные только для него. Полифорфизм – свойство, позволяющее одно и то же имя использовать для решения несколькоих технически разных задач. Концепция полиморфизма: один интерфейс, множество реализаций. Это означает, что можно создать общий интерфейс для близких по смыслу действий.

Что такое класс? объект?
Класс – модель еще не существующей сущности (объекта). Класс фактически описывает устройство объекта, являясь своего рода чертежом. Объект – совокупность данных и методов для их обработки. Вообще, объектом является все то, что поддерживает инкапсуляцию.Класс – это тип данных, а объект – это экземпляр типа класса.

Что такое область видимости переменной?
Область видимости переменной – место в программе, в которой доступно значение переменной. Каждая переменная имеет свою область видимости.

Public, Protected, Private?
Public. Методы или переменные доступны из любого места в коде. Protected. Защищенные методы или переменные доступные только внутри класса, где они были объявлены или из его произвольных классов. Private. Закрытые методы или переменные доступны только внутри класса.

Чем отличается процедурный подход от объектно-ориентированного?
Процедурный подход предоставляет возможность программисту определять каждый шаг в процессе решения задачи. Задачи разбиваются на шаги и решаются шаг за шагом. ООП предполагает заключение внутри одного класса, как данных, так и методов их обработки.

Что такое абстрактный класс?
Абстрактный класс – это базовый класс, который не предполагает создание экземпляров (обратите внимание, что некоторые языки позволяют это сделать, например Pascal (Delphi)). Абстрактные классы реализуют на практике один из принципов ООП – полиморфизм. Абстрактый класс содержит абстрактные методы и свойства. Абстрактный метод не реализуется для класса, в котором описан, однако должен быть реализован для его неабстрактных потомков.

Зачем нужен интерфейс, если есть абстрактный класс?
Затем, что можно унаследовать только от одного абстракторого класса, но реализовать множество интерфейсов. Все методы, описанные в интерфейсе, должны быть реализованны в классе, а в абстрактном классе их нужно для этой цели специально отмечать.
